[1mdiff --git a/readme.mdx b/readme.mdx[m
[1mnew file mode 100644[m
[1mindex 0000000..cfb5699[m
[1m--- /dev/null[m
[1m+++ b/readme.mdx[m
[36m@@ -0,0 +1,255 @@[m
[32m+[m[32m# Better Auth - Full-Stack Authentication System[m
[32m+[m
[32m+[m[32mA modern, full-stack authentication system built with [Better Auth](https://better-auth.com), Next.js, and Hono. This project demonstrates how to implement secure authentication with email/password login, user registration, and session management.[m
[32m+[m
[32m+[m[32m## üöÄ Features[m
[32m+[m
[32m+[m[32m- **Secure Authentication**: Built on Better Auth's battle-tested authentication system[m
[32m+[m[32m- **Modern Tech Stack**: Next.js 15, React 19, TypeScript, and Tailwind CSS[m
[32m+[m[32m- **Full-Stack**: Backend API with Hono and frontend with Next.js[m
[32m+[m[32m- **Database Integration**: PostgreSQL with Drizzle ORM[m
[32m+[m[32m- **Type Safety**: End-to-end TypeScript support[m
[32m+[m[32m- **Modern UI**: Beautiful, responsive interface with shadcn/ui components[m
[32m+[m[32m- **CORS Enabled**: Cross-origin resource sharing for development[m
[32m+[m[32m- **Health Checks**: Built-in health monitoring endpoints[m
[32m+[m
[32m+[m[32m## üèóÔ∏è Architecture[m
[32m+[m
[32m+[m[32m```[m
[32m+[m[32mbetter-auth/[m
[32m+[m[32m‚îú‚îÄ‚îÄ backend/          # Hono API server with Better Auth[m
[32m+[m[32m‚îú‚îÄ‚îÄ frontend/         # Next.js React application[m
[32m+[m[32m‚îî‚îÄ‚îÄ readme.mdx        # This file[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m### Backend (`/backend`)[m
[32m+[m[32m- **Hono**: Fast, lightweight web framework[m
[32m+[m[32m- **Better Auth**: Authentication library with Drizzle adapter[m
[32m+[m[32m- **PostgreSQL**: Database with Drizzle ORM[m
[32m+[m[32m- **TypeScript**: Full type safety[m
[32m+[m
[32m+[m[32m### Frontend (`/frontend`)[m
[32m+[m[32m- **Next.js 15**: React framework with App Router[m
[32m+[m[32m- **React 19**: Latest React features[m
[32m+[m[32m- **Tailwind CSS**: Utility-first CSS framework[m
[32m+[m[32m- **shadcn/ui**: Beautiful, accessible UI components[m
[32m+[m
[32m+[m[32m## üõ†Ô∏è Prerequisites[m
[32m+[m
[32m+[m[32m- Node.js 18+[m[41m [m
[32m+[m[32m- pnpm (recommended) or npm[m
[32m+[m[32m- PostgreSQL database[m
[32m+[m[32m- Git[m
[32m+[m
[32m+[m[32m## üì¶ Installation[m
[32m+[m
[32m+[m[32m### 1. Clone the repository[m
[32m+[m[32m```bash[m
[32m+[m[32mgit clone <your-repo-url>[m
[32m+[m[32mcd better-auth[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m### 2. Install dependencies[m
[32m+[m[32m```bash[m
[32m+[m[32m# Install backend dependencies[m
[32m+[m[32mcd backend[m
[32m+[m[32mpnpm install[m
[32m+[m
[32m+[m[32m# Install frontend dependencies[m
[32m+[m[32mcd ../frontend[m
[32m+[m[32mpnpm install[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m### 3. Environment Setup[m
[32m+[m
[32m+[m[32mCreate `.env` files in both `backend/` and `frontend/` directories:[m
[32m+[m
[32m+[m[32m**Backend (`.env`)**[m
[32m+[m[32m```env[m
[32m+[m[32mDATABASE_URL="postgresql://username:password@localhost:5432/better_auth"[m
[32m+[m[32mJWT_SECRET="your-super-secret-jwt-key"[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m**Frontend (`.env.local`)**[m
[32m+[m[32m```env[m
[32m+[m[32mNEXT_PUBLIC_API_URL="http://localhost:3000"[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m### 4. Database Setup[m
[32m+[m
[32m+[m[32m```bash[m
[32m+[m[32mcd backend[m
[32m+[m
[32m+[m[32m# Generate database migrations[m
[32m+[m[32mpnpm db:generate[m
[32m+[m
[32m+[m[32m# Push schema to database[m
[32m+[m[32mpnpm db:push[m
[32m+[m
[32m+[m[32m# Or run migrations[m
[32m+[m[32mpnpm db:migrate[m
[32m+[m
[32m+[m[32m# Optional: Open Drizzle Studio[m
[32m+[m[32mpnpm db:studio[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m## üöÄ Running the Application[m
[32m+[m
[32m+[m[32m### Development Mode[m
[32m+[m
[32m+[m[32m**Terminal 1 - Backend**[m
[32m+[m[32m```bash[m
[32m+[m[32mcd backend[m
[32m+[m[32mpnpm dev[m
[32m+[m[32m```[m
[32m+[m[32mBackend will run on `http://localhost:3000`[m
[32m+[m
[32m+[m[32m**Terminal 2 - Frontend**[m
[32m+[m[32m```bash[m
[32m+[m[32mcd frontend[m
[32m+[m[32mpnpm dev[m
[32m+[m[32m```[m
[32m+[m[32mFrontend will run on `http://localhost:3001`[m
[32m+[m
[32m+[m[32m### Production Build[m
[32m+[m
[32m+[m[32m```bash[m
[32m+[m[32m# Backend[m
[32m+[m[32mcd backend[m
[32m+[m[32mpnpm build[m
[32m+[m[32mpnpm start[m
[32m+[m
[32m+[m[32m# Frontend[m
[32m+[m[32mcd frontend[m
[32m+[m[32mpnpm build[m
[32m+[m[32mpnpm start[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m## üîê Authentication Endpoints[m
[32m+[m
[32m+[m[32mThe backend provides the following authentication endpoints:[m
[32m+[m
[32m+[m[32m- `POST /api/register` - User registration[m
[32m+[m[32m- `GET/POST /api/auth/*` - Better Auth routes (login, logout, etc.)[m
[32m+[m[32m- `GET /health` - Health check endpoint[m
[32m+[m
[32m+[m[32m### Example Usage[m
[32m+[m
[32m+[m[32m**Register a new user:**[m
[32m+[m[32m```bash[m
[32m+[m[32mcurl -X POST http://localhost:3000/api/register \[m
[32m+[m[32m  -H "Content-Type: application/json" \[m
[32m+[m[32m  -d '{[m
[32m+[m[32m    "name": "John Doe",[m
[32m+[m[32m    "email": "john@example.com",[m
[32m+[m[32m    "password": "securepassword123"[m
[32m+[m[32m  }'[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m## üé® Frontend Components[m
[32m+[m
[32m+[m[32mThe frontend includes several reusable components:[m
[32m+[m
[32m+[m[32m- **Login Form**: Authentication form with validation[m
[32m+[m[32m- **UI Components**: Button, Input, Form, Label components from shadcn/ui[m
[32m+[m[32m- **Responsive Layout**: Mobile-first design with Tailwind CSS[m
[32m+[m
[32m+[m[32m## üóÑÔ∏è Database Schema[m
[32m+[m
[32m+[m[32mThe project uses Drizzle ORM with PostgreSQL. Key tables include:[m
[32m+[m
[32m+[m[32m- `users` - User accounts and profiles[m
[32m+[m[32m- `sessions` - User sessions and authentication[m
[32m+[m[32m- `verification_tokens` - Email verification tokens[m
[32m+[m
[32m+[m[32m## üîß Development Scripts[m
[32m+[m
[32m+[m[32m### Backend Scripts[m
[32m+[m[32m```bash[m
[32m+[m[32mpnpm dev          # Start development server[m
[32m+[m[32mpnpm build        # Build for production[m
[32m+[m[32mpnpm start        # Start production server[m
[32m+[m[32mpnpm db:generate  # Generate database migrations[m
[32m+[m[32mpnpm db:migrate   # Run database migrations[m
[32m+[m[32mpnpm db:push      # Push schema to database[m
[32m+[m[32mpnpm db:studio    # Open Drizzle Studio[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m### Frontend Scripts[m
[32m+[m[32m```bash[m
[32m+[m[32mpnpm dev          # Start development server[m
[32m+[m[32mpnpm build        # Build for production[m
[32m+[m[32mpnpm start        # Start production server[m
[32m+[m[32mpnpm lint         # Run ESLint[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m## üß™ Testing[m
[32m+[m
[32m+[m[32m```bash[m
[32m+[m[32m# Backend tests (when implemented)[m
[32m+[m[32mcd backend[m
[32m+[m[32mpnpm test[m
[32m+[m
[32m+[m[32m# Frontend tests (when implemented)[m
[32m+[m[32mcd frontend[m
[32m+[m[32mpnpm test[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m## üìö API Documentation[m
[32m+[m
[32m+[m[32mThe backend includes OpenAPI documentation through Better Auth's OpenAPI plugin. Access it at:[m
[32m+[m
[32m+[m[32m- **Swagger UI**: `http://localhost:3000/api/auth/docs`[m
[32m+[m[32m- **OpenAPI JSON**: `http://localhost:3000/api/auth/openapi.json`[m
[32m+[m
[32m+[m[32m## üîí Security Features[m
[32m+[m
[32m+[m[32m- **JWT-based authentication**[m
[32m+[m[32m- **Password hashing** (handled by Better Auth)[m
[32m+[m[32m- **Session management**[m
[